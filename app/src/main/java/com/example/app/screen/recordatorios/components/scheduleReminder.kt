package com.example.app.screen.recordatorios.components

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.util.Log
import com.example.app.models.ReminderEntity
import java.util.Calendar
import kotlin.jvm.java

fun scheduleReminder(context: Context, reminder: ReminderEntity) {
    val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager

    // ‚úÖ IMPORTANTE: reminder.days ahora es UN SOLO D√çA (no m√∫ltiples)
    Log.d("ScheduleReminder", "üîπ Programando alarma para UN d√≠a:")
    Log.d("ScheduleReminder", "   T√≠tulo: ${reminder.title}")
    Log.d("ScheduleReminder", "   D√≠a: ${reminder.days}")
    Log.d("ScheduleReminder", "   Hora: ${reminder.time}")
    Log.d("ScheduleReminder", "   ID √∫nico: ${reminder.id}")

    val intent = Intent(context, ReminderReceiver::class.java).apply {
        putExtra("reminder_id", reminder.id)
        putExtra("title", reminder.title)
        putExtra("description", reminder.description)
        putExtra("sound", reminder.sound)
        putExtra("vibration", reminder.vibration)
        putExtra("day", reminder.days)  // Un solo d√≠a
        putExtra("time", reminder.time)
    }

    val pendingIntent = PendingIntent.getBroadcast(
        context,
        reminder.id,  // ID √∫nico para cada alarma
        intent,
        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
    )

    // üîπ Calcular la pr√≥xima ocurrencia del d√≠a de la semana
    val triggerAtMillis = calculateNextOccurrence(reminder.days, reminder.time)

    if (triggerAtMillis == null) {
        Log.e("ScheduleReminder", "‚ùå Error calculando pr√≥xima ocurrencia")
        Log.e("ScheduleReminder", "   D√≠a recibido: '${reminder.days}'")
        Log.e("ScheduleReminder", "   Hora recibida: '${reminder.time}'")
        return
    }

    val calendar = Calendar.getInstance().apply { timeInMillis = triggerAtMillis }
    Log.d("ScheduleReminder", "üìÖ Pr√≥xima ejecuci√≥n: ${calendar.time}")

    // ‚è∞ Programar alarma exacta
    try {
        alarmManager.setExactAndAllowWhileIdle(
            AlarmManager.RTC_WAKEUP,
            triggerAtMillis,
            pendingIntent
        )
        Log.d("ScheduleReminder", "‚úÖ Alarma programada exitosamente")
    } catch (e: Exception) {
        Log.e("ScheduleReminder", "‚ùå Error al programar alarma: ${e.message}")
    }
}

private fun calculateNextOccurrence(dayName: String?, time: String?): Long? {
    if (dayName == null || time == null) {
        Log.e("ScheduleReminder", "‚ùå D√≠a o hora nulos")
        return null
    }

    // ‚úÖ VALIDAR: dayName debe ser UN SOLO D√çA, no m√∫ltiples
    if (dayName.contains(",")) {
        Log.e("ScheduleReminder", "‚ùå ERROR: Se recibieron m√∫ltiples d√≠as: '$dayName'")
        Log.e("ScheduleReminder", "   Esta funci√≥n solo acepta UN d√≠a a la vez")
        return null
    }

    // Mapeo de nombres de d√≠as a valores Calendar
    val dayMap = mapOf(
        "Lunes" to Calendar.MONDAY,
        "Martes" to Calendar.TUESDAY,
        "Mi√©rcoles" to Calendar.WEDNESDAY,
        "Jueves" to Calendar.THURSDAY,
        "Viernes" to Calendar.FRIDAY,
        "S√°bado" to Calendar.SATURDAY,
        "Domingo" to Calendar.SUNDAY
    )

    val targetDayOfWeek = dayMap[dayName.trim()]
    if (targetDayOfWeek == null) {
        Log.e("ScheduleReminder", "‚ùå D√≠a no reconocido: '$dayName'")
        Log.e("ScheduleReminder", "   D√≠as v√°lidos: ${dayMap.keys}")
        return null
    }

    // Parsear hora (formato: "HH:mm:ss")
    val timeParts = time.split(":")
    if (timeParts.size != 3) {
        Log.e("ScheduleReminder", "‚ùå Formato de hora inv√°lido: '$time'")
        Log.e("ScheduleReminder", "   Formato esperado: HH:mm:ss")
        return null
    }

    val hour = timeParts[0].toIntOrNull()
    val minute = timeParts[1].toIntOrNull()
    val second = timeParts[2].toIntOrNull()

    if (hour == null || minute == null || second == null) {
        Log.e("ScheduleReminder", "‚ùå Error parseando hora: '$time'")
        return null
    }

    // Crear calendario para hoy
    val now = Calendar.getInstance()
    val target = Calendar.getInstance().apply {
        set(Calendar.HOUR_OF_DAY, hour)
        set(Calendar.MINUTE, minute)
        set(Calendar.SECOND, second)
        set(Calendar.MILLISECOND, 0)
    }

    // Calcular d√≠as de diferencia
    val currentDayOfWeek = now.get(Calendar.DAY_OF_WEEK)
    var daysUntilTarget = targetDayOfWeek - currentDayOfWeek

    Log.d("ScheduleReminder", "üìä C√°lculo:")
    Log.d("ScheduleReminder", "   D√≠a actual: $currentDayOfWeek")
    Log.d("ScheduleReminder", "   D√≠a objetivo: $targetDayOfWeek")
    Log.d("ScheduleReminder", "   Diferencia inicial: $daysUntilTarget d√≠as")

    // Si el d√≠a es hoy, verificar si la hora ya pas√≥
    if (daysUntilTarget == 0) {
        if (target.timeInMillis <= now.timeInMillis) {
            // La hora ya pas√≥ hoy, programar para la pr√≥xima semana
            daysUntilTarget = 7
            Log.d("ScheduleReminder", "   ‚è∞ Hora ya pas√≥, programando para pr√≥xima semana")
        } else {
            Log.d("ScheduleReminder", "   ‚è∞ Programando para HOY")
        }
    } else if (daysUntilTarget < 0) {
        // El d√≠a ya pas√≥ esta semana, ajustar para la pr√≥xima
        daysUntilTarget += 7
        Log.d("ScheduleReminder", "   üìÖ D√≠a ya pas√≥, ajustando: +7 d√≠as")
    }

    // Agregar los d√≠as necesarios
    target.add(Calendar.DAY_OF_YEAR, daysUntilTarget)

    Log.d("ScheduleReminder", "   ‚úÖ D√≠as hasta objetivo: $daysUntilTarget")
    Log.d("ScheduleReminder", "   ‚úÖ Fecha calculada: ${target.time}")

    return target.timeInMillis
}